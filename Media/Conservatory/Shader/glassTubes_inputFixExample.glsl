//--------------------------------------------------------------------------------------
// Copyright 2014 Intel Corporation
// All Rights Reserved
//
// Permission is granted to use, copy, distribute and prepare derivative works of this
// software for any purpose and without fee, provided, that the above copyright notice
// and this statement appear in all copies.  Intel makes no representations about the
// suitability of this software for any purpose.  THIS SOFTWARE IS PROVIDED "AS IS."
// INTEL SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, AND ALL LIABILITY,
// INCLUDING CONSEQUENTIAL AND OTHER INDIRECT DAMAGES, FOR THE USE OF THIS SOFTWARE,
// INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PROPRIETARY RIGHTS, AND INCLUDING THE
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  Intel does not
// assume any responsibility for any errors which may appear in this software nor any
// responsibility to update it.
//--------------------------------------------------------------------------------------
// Generated by ShaderGenerator.exe version 0.13
//--------------------------------------------------------------------------------------

// -------------------------------------
layout (std140, row_major) uniform cbPerModelValues
{
   mat4 World;
   mat4 NormalMatrix;
   mat4 WorldViewProjection;
   mat4 InverseWorld;
   mat4 LightWorldViewProjection;
   vec4 BoundingBoxCenterWorldSpace;
   vec4 BoundingBoxHalfWorldSpace;
   vec4 BoundingBoxCenterObjectSpace;
   vec4 BoundingBoxHalfObjectSpace;
};

// -------------------------------------
layout (std140, row_major) uniform cbPerFrameValues
{
   mat4  View;
   mat4  InverseView;
   mat4  Projection;
   mat4  ViewProjection;
   vec4  AmbientColor;
   vec4  LightColor;
   vec4  LightDirection;
   vec4  EyePosition;
   vec4  TotalTimeInSeconds;
};

#ifdef GLSL_VERTEX_SHADER

#define POSITION  0
#define NORMAL    1
#define BINORMAL  2
#define TANGENT   3
#define COLOR   4
#define TEXCOORD0 5
#define TEXCOORD1 6
// -------------------------------------
layout (location = POSITION)  in vec3 Position; // Projected position
layout (location = NORMAL)    in vec3 Normal;
layout (location = TEXCOORD0) in vec2 UV0;
layout (location = TEXCOORD1) in vec2 UV1;
// -------------------------------------
out vec4 outPosition;
out vec3 outNormal;
out vec2 outUV0;
out vec2 outUV1;
out vec3 outWorldPosition; // Object space position 
#endif //GLSL_VERTEX_SHADER
#ifdef GLSL_FRAGMENT_SHADER
// -------------------------------------
in vec4 outPosition;
in vec3 outNormal;
in vec2 outUV0;
in vec2 outUV1;
in vec3 outWorldPosition; // Object space position 
// -------------------------------------
uniform sampler2D texture_DM;
uniform sampler2D texture_SM;
uniform samplerCube texture_RM;
uniform sampler2D texture_AO;
// -------------------------------------
vec4 DIFFUSE( )
{
    return texture(texture_DM,(((outUV0)) *(1)) );
}

// -------------------------------------
vec4 SPECULARTMP( )
{
    return texture(texture_SM,(((outUV0)) *(1)) );
}

// -------------------------------------
vec4 EMISSIVETMP(vec3 Reflection)
{
    return texture(texture_RM,(Reflection) );
}

// -------------------------------------
vec4 AMBIENTOCC( )
{
    return texture(texture_AO,(((outUV1)) *(1)) );
}

// -------------------------------------
vec4 EMISSIVE(vec3 Reflection)
{
    return (EMISSIVETMP(Reflection)) *(3);
}

// -------------------------------------
vec4 SPECULAR( )
{
    return (SPECULARTMP()) *(2);
}

// -------------------------------------
vec4 AMBIENT( )
{
    return ((DIFFUSE()) *(AMBIENTOCC())) *(5);
}

// -------------------------------------
#endif //GLSL_FRAGMENT_SHADER

#ifdef GLSL_VERTEX_SHADER
// -------------------------------------
void main( )
{

    outPosition      = vec4( Position, 1.0f) * WorldViewProjection;
    outWorldPosition = (vec4( Position, 1.0f) * World ).xyz;

    // TODO: transform the light into object space instead of the normal into world space
    outNormal   = Normal   * mat3(World);
outUV0 = UV0;
outUV1 = UV1;

    gl_Position = outPosition;
}

#endif //GLSL_VERTEX_SHADER

#ifdef GLSL_FRAGMENT_SHADER
out vec4 fragColor;// -------------------------------------
void main( )
{
    vec4 result = vec4(0,0,0,1);

    vec3 normal = normalize(outNormal);

    // Specular-related computation
    vec3 eyeDirection  = normalize(outWorldPosition - EyePosition.xyz);
    vec3 Reflection    = reflect( eyeDirection, normal );

    // Emissive-related computation
    vec3 emissive = EMISSIVE(Reflection).rgb;
    result.xyz +=  emissive;
    float  shadowAmount = 1.0f;

    // Ambient-related computation
    vec3 ambient = AmbientColor.rgb * AMBIENT().rgb;
    result.xyz +=  ambient;
   vec3 lightDirection = -LightDirection.xyz;

    // Diffuse-related computation
    float  nDotL = max( 0,dot( normal, lightDirection ) );
    vec3 diffuse = LightColor.rgb * nDotL * shadowAmount  * DIFFUSE().rgb;
    result.xyz += diffuse;
    float  rDotL = max(0,dot( Reflection, lightDirection ));
    vec3 specular = pow(rDotL,  8.0f ) * SPECULAR().rgb * LightColor.rgb;
   result.xyz += specular;
    fragColor =  result;
}

#endif //GLSL_FRAGMENT_SHADER
